#version 440
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

uniform sampler2D tex;
uniform unsigned int seed;
uniform mat4 invProjViewMX;
uniform mat4 camPos;

float hit_sphere(const vec3 origin, const vec3 center, float radius, const vec3 r){
    vec3 oc = origin - center;
    float a = dot(r, r);
    float half_b = dot(oc, r);
    float c = dot(oc,oc) - radius*radius;
    float discriminant = half_b*half_b - a*c;
    if (discriminant < 0) {
        return -1.0f;
    } else {
        return (-half_b - sqrt(discriminant) ) / a;
    }
}

// By Morgan McGuire @morgan3d, http://graphicscodex.com
// Reuse permitted under the BSD license.
float hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }
float hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }

float noise(vec2 x) {
    vec2 i = floor(x);
    vec2 f = fract(x);

	// Four corners in 2D of a tile
	float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));

    // Simple 2D lerp using smoothstep envelope between the values.
	// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),
	//			mix(c, d, smoothstep(0.0, 1.0, f.x)),
	//			smoothstep(0.0, 1.0, f.y)));

	// Same code, with the clamps in smoothstep and common subexpressions
	// optimized away.
    vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

float noise(vec3 x) {
    const vec3 step = vec3(110, 241, 171);

    vec3 i = floor(x);
    vec3 f = fract(x);
 
    // For performance, compute the base input to a 1D hash from the integer part of the argument and the 
    // incremental change to the 1D based on the 3D -> 1D wrapping
    float n = dot(i, step);

    vec3 u = f * f * (3.0 - 2.0 * f);
    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}


void main() {
    // base pixel colour for image
    vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);
    // get index in global work group i.e x,y position
    const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    const ivec2 dims = imageSize(img_output); // fetch image dimensions
    const float aspectRatio = dims.x / float(dims.y);
    const float depth = 99.9f;
    const float sum = 100.1f;

    const vec3 sphere1_center = vec3(0.f,0.f,-5.f);
    const vec3 sphere2_center = vec3(0.f,-100.5f,-5.f);

    const vec2 tex_coords = pixel_coords/vec2(dims.x,dims.y);

    vec2 sampleCoords = vec2(pixel_coords.x+noise(vec3(tex_coords*10.f,seed*0.5f)), pixel_coords.y+noise(vec3(tex_coords*10.f,seed*0.5f+0.25f)));

    sampleCoords = sampleCoords/vec2(dims.x,dims.y);
    const vec2 screen_coords = sampleCoords *2.f -1.f;
    const vec3 ray = (invProjViewMX * vec4(screen_coords*depth,sum,depth)).xyz;
    
    const float sphere1_t = hit_sphere(vec3(0,0,0),sphere1_center,1.f,ray);
    const float sphere2_t = hit_sphere(vec3(0,0,0),sphere2_center,100.f,ray);


    if (sphere1_t > 0.f && (sphere1_t < sphere2_t || sphere2_t <= 0.f)) {
        pixel += vec4(0.5*(1+normalize(sphere1_t*ray - sphere1_center)),1.f);
    } else {    
        if (sphere2_t > 0.f && (sphere2_t < sphere1_t || sphere1_t <= 0.f)) {
            pixel += vec4(0.5*(1+normalize(sphere2_t*ray - sphere2_center)),1.f);
        }
    }

    pixel = mix(texelFetch(tex, pixel_coords, 0),pixel, 1.f / float(seed+1.f));

    // output to a specific pixel in the image
    imageStore(img_output, pixel_coords, pixel);
}